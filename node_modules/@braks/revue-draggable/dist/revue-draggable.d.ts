import { EventHookOn, MaybeRef } from '@vueuse/core';
import * as vue_demi from 'vue-demi';
import { Ref, Directive, VNode, Plugin, PropType } from 'vue-demi';

declare type DraggableData = {
    node: HTMLElement;
    x: number;
    y: number;
    deltaX: number;
    deltaY: number;
    lastX: number;
    lastY: number;
};
declare type Bounds = {
    left?: number;
    top?: number;
    right?: number;
    bottom?: number;
};
declare type ControlPosition = {
    x: number;
    y: number;
};
declare type PositionOffsetControlPosition = {
    x: number | string;
    y: number | string;
};
declare type EventHandler<T> = (e: T) => void | false;
declare type MouseTouchEvent = MouseEvent & TouchEvent;
interface DraggableBounds {
    left?: number;
    right?: number;
    top?: number;
    bottom?: number;
}
interface DraggableOptions extends DraggableCoreOptions {
    axis: 'both' | 'x' | 'y' | 'none';
    bounds: DraggableBounds | string | false;
    defaultClassName: string;
    defaultClassNameDragging: string;
    defaultClassNameDragged: string;
    defaultPosition: ControlPosition;
    positionOffset?: PositionOffsetControlPosition;
    position?: ControlPosition;
}
interface DraggableCoreOptions {
    allowAnyClick: boolean;
    enableUserSelectHack: boolean;
    disabled: boolean;
    update: boolean;
    offsetParent?: HTMLElement;
    grid?: [number, number];
    handle: string;
    cancel: string;
    scale: number;
    start: DraggableEventHandler;
    move: DraggableEventHandler;
    stop: DraggableEventHandler;
}
declare type DraggableCoreState = State & DraggableCoreOptions;
declare type DraggableState = State & DraggableOptions;
interface State {
    dragging: boolean;
    dragged: boolean;
    x: number;
    y: number;
    prevPropsPosition: {
        x: number;
        y: number;
    };
    slackX: number;
    slackY: number;
    isElementSVG: boolean;
    touch?: number;
}
interface UseDraggable {
    onDragStart: EventHookOn<DraggableEvent>;
    onDrag: EventHookOn<DraggableEvent>;
    onDragStop: EventHookOn<DraggableEvent>;
    onTransformed: EventHookOn<TransformEvent>;
    onUpdated: EventHookOn<Partial<DraggableState>>;
    state: Ref<Partial<DraggableState>>;
}
declare type UseDraggableCore = Omit<UseDraggable, 'onTransformed'>;
interface DraggableEvent {
    event: MouseEvent;
    data: DraggableData;
}
interface TransformEvent {
    el: any;
    style: Record<string, string> | false;
    transform: string | false;
    classes: {
        [x: string]: boolean;
    };
}
declare type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void | false;
declare type DraggableEventListener = (draggableEvent: DraggableEvent) => any;

declare const useDraggableCore: (target: MaybeRef<any>, options: Partial<DraggableCoreOptions>) => UseDraggableCore;

declare const useDraggable: (target: MaybeRef<any>, options: Partial<DraggableOptions>) => UseDraggable;

declare const DraggableDirective: Directive<HTMLElement | VNode, DraggableOptions>;

declare const plugin: Plugin;

declare const Draggable: vue_demi.DefineComponent<{
    axis: {
        type: PropType<"both" | "x" | "y" | "none">;
        default: string;
    };
    bounds: {
        type: PropType<string | false | DraggableBounds>;
        default: boolean;
    };
    defaultClassName: {
        type: PropType<string>;
        default: string;
    };
    defaultClassNameDragging: {
        type: PropType<string>;
        default: string;
    };
    defaultClassNameDragged: {
        type: PropType<string>;
        default: string;
    };
    defaultPosition: {
        type: PropType<ControlPosition>;
        default: () => {
            x: number;
            y: number;
        };
    };
    scale: {
        type: PropType<number>;
        default: number;
    };
    position: {
        type: PropType<ControlPosition | undefined>;
        default: undefined;
    };
    positionOffset: {
        type: PropType<PositionOffsetControlPosition | undefined>;
        default: undefined;
    };
    allowAnyClick: {
        type: PropType<boolean>;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    enableUserSelectHack: {
        type: PropType<boolean>;
        default: boolean;
    };
    cancel: {
        type: PropType<string>;
        default: undefined;
    };
    offsetParent: {
        type: PropType<HTMLElement | undefined>;
        default: () => void;
    };
    grid: {
        type: PropType<[number, number] | undefined>;
        default: undefined;
    };
    handle: {
        type: PropType<string>;
        default: undefined;
    };
    update: {
        type: PropType<boolean>;
        default: boolean;
    };
    start: {
        type: PropType<DraggableEventHandler>;
        default: () => void;
    };
    move: {
        type: PropType<DraggableEventHandler>;
        default: () => void;
    };
    stop: {
        type: PropType<DraggableEventHandler>;
        default: () => void;
    };
}, () => vue_demi.VNode<vue_demi.RendererNode, vue_demi.RendererElement, {
    [key: string]: any;
}> | undefined, unknown, {}, {}, vue_demi.ComponentOptionsMixin, vue_demi.ComponentOptionsMixin, ("stop" | "move" | "start" | "transformed")[], "stop" | "start" | "move" | "transformed", vue_demi.VNodeProps & vue_demi.AllowedComponentProps & vue_demi.ComponentCustomProps, Readonly<{
    axis?: unknown;
    bounds?: unknown;
    defaultClassName?: unknown;
    defaultClassNameDragging?: unknown;
    defaultClassNameDragged?: unknown;
    defaultPosition?: unknown;
    scale?: unknown;
    position?: unknown;
    positionOffset?: unknown;
    allowAnyClick?: unknown;
    disabled?: unknown;
    enableUserSelectHack?: unknown;
    cancel?: unknown;
    offsetParent?: unknown;
    grid?: unknown;
    handle?: unknown;
    update?: unknown;
    start?: unknown;
    move?: unknown;
    stop?: unknown;
} & {
    bounds: string | false | DraggableBounds;
    stop: DraggableEventHandler;
    axis: "both" | "x" | "y" | "none";
    scale: number;
    allowAnyClick: boolean;
    enableUserSelectHack: boolean;
    disabled: boolean;
    update: boolean;
    offsetParent: HTMLElement | undefined;
    start: DraggableEventHandler;
    move: DraggableEventHandler;
    defaultClassName: string;
    defaultClassNameDragging: string;
    defaultClassNameDragged: string;
    defaultPosition: ControlPosition;
} & {
    grid?: [number, number] | undefined;
    handle?: string | undefined;
    cancel?: string | undefined;
    positionOffset?: PositionOffsetControlPosition | undefined;
    position?: ControlPosition | undefined;
}>, {
    bounds: string | false | DraggableBounds;
    stop: DraggableEventHandler;
    axis: "both" | "x" | "y" | "none";
    scale: number;
    allowAnyClick: boolean;
    enableUserSelectHack: boolean;
    disabled: boolean;
    update: boolean;
    offsetParent: HTMLElement | undefined;
    grid: [number, number] | undefined;
    handle: string;
    cancel: string;
    start: DraggableEventHandler;
    move: DraggableEventHandler;
    defaultClassName: string;
    defaultClassNameDragging: string;
    defaultClassNameDragged: string;
    defaultPosition: ControlPosition;
    positionOffset: PositionOffsetControlPosition | undefined;
    position: ControlPosition | undefined;
}>;

declare const DraggableCore: vue_demi.DefineComponent<{
    scale: {
        type: PropType<number>;
        default: number;
    };
    allowAnyClick: {
        type: PropType<boolean>;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    enableUserSelectHack: {
        type: PropType<boolean>;
        default: boolean;
    };
    cancel: {
        type: PropType<string>;
        default: undefined;
    };
    offsetParent: {
        type: PropType<HTMLElement | undefined>;
        default: undefined;
    };
    grid: {
        type: PropType<[number, number] | undefined>;
        default: undefined;
    };
    handle: {
        type: PropType<string>;
        default: undefined;
    };
    start: {
        type: PropType<DraggableEventHandler>;
        default: () => void;
    };
    move: {
        type: PropType<DraggableEventHandler>;
        default: () => void;
    };
    stop: {
        type: PropType<DraggableEventHandler>;
        default: () => void;
    };
}, () => vue_demi.VNode<vue_demi.RendererNode, vue_demi.RendererElement, {
    [key: string]: any;
}> | undefined, unknown, {}, {}, vue_demi.ComponentOptionsMixin, vue_demi.ComponentOptionsMixin, ("stop" | "move" | "start")[], "stop" | "start" | "move", vue_demi.VNodeProps & vue_demi.AllowedComponentProps & vue_demi.ComponentCustomProps, Readonly<{
    scale?: unknown;
    allowAnyClick?: unknown;
    disabled?: unknown;
    enableUserSelectHack?: unknown;
    cancel?: unknown;
    offsetParent?: unknown;
    grid?: unknown;
    handle?: unknown;
    start?: unknown;
    move?: unknown;
    stop?: unknown;
} & {
    stop: DraggableEventHandler;
    scale: number;
    allowAnyClick: boolean;
    enableUserSelectHack: boolean;
    disabled: boolean;
    start: DraggableEventHandler;
    move: DraggableEventHandler;
} & {
    offsetParent?: HTMLElement | undefined;
    grid?: [number, number] | undefined;
    handle?: string | undefined;
    cancel?: string | undefined;
}>, {
    stop: DraggableEventHandler;
    scale: number;
    allowAnyClick: boolean;
    enableUserSelectHack: boolean;
    disabled: boolean;
    offsetParent: HTMLElement | undefined;
    grid: [number, number] | undefined;
    handle: string;
    cancel: string;
    start: DraggableEventHandler;
    move: DraggableEventHandler;
}>;

export { Bounds, ControlPosition, Draggable, DraggableBounds, DraggableCore, DraggableCoreOptions, DraggableCoreState, DraggableData, DraggableDirective, DraggableEvent, DraggableEventHandler, DraggableEventListener, DraggableOptions, plugin as DraggablePlugin, DraggableState, EventHandler, MouseTouchEvent, PositionOffsetControlPosition, TransformEvent, UseDraggable, UseDraggableCore, useDraggable, useDraggableCore };
